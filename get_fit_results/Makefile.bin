#
#
# $Header$
#


# Things common to both library and executable builds live in Makefile.common
include $(HALLD_SIM_HOME)/src/BMS/Makefile.common

.PHONY: mkdirs depclean clean env

ifeq ($(LD), ld)
 LD = $(CXX)
endif

MISC_LIBS			+= -lpthread -lz -lbz2

ifdef DEBUG
	LD_FLAGS	+= -g -pg
endif

MAIN_FILES = $(shell $(HALLD_SIM_HOME)/src/BMS/main_files.sh)

EXE_NAMES = $(addsuffix $(DEBUG_SUFFIX),$(basename $(MAIN_FILES)))
EXE_PATHNAMES = $(foreach s,$(EXE_NAMES),$(BIN_DIR)/$s)
MAIN_OBJS =  $(addsuffix .o,$(EXE_NAMES))

# Redefine OBJS to include debug suffixes
DOBJS = $(addsuffix $(DEBUG_SUFFIX).o,$(basename $(OBJS)))
NON_MAIN_OBJS = $(filter-out $(MAIN_OBJS),$(DOBJS))

OBJ_DIR = .obj/$(BMS_OSNAME)
OUTPUT_OPTION = -o $(OBJ_DIR)/$@
empty:=
space:= $(empty) $(empty)
LIB_PATH = $(subst $(space),:,$(strip $(LIB_DIRS)))
VPATH = $(OBJ_DIR):$(BIN_DIR):$(LIB_PATH)
LINK_OBJS += $(addprefix $(OBJ_DIR)/,$(NON_MAIN_OBJS))

LIB_DIRS += $(INSTALL_DIR)/lib/$(BMS_OSNAME)
ifdef HALLD_MY
  LIB_DIRS += $(HALLD_SIM_HOME)/lib/$(BMS_OSNAME)
endif
# Add the new path to the common build tree
LIB_DIRS += $(HALLD_SIM_HOME)/$(BMS_OSNAME)/lib

LD_DIRS += $(addprefix -L,$(LIB_DIRS))
MODULES += $(ADDITIONAL_MODULES)
LD_LIBS_0 += $(addsuffix $(DEBUG_SUFFIX),$(addprefix -l,$(MODULES)))
LD_LIBS = $(subst -lJANA$(DEBUG_SUFFIX), -lJANA, $(LD_LIBS_0))

first: install


all: mkdirs $(EXE_NAMES)
	@rm -f $(DICT_FILES)


$(EXE_NAMES): $(DOBJS) $(LD_LIBS)
	$(LD) $(LD_FLAGS) $(LD_DIRS) \
	   $(OBJ_DIR)/$@.o $(LINK_OBJS) \
	   $(LD_LIBS) $(MISC_LIBS) \
	   -o $(BIN_DIR)/$@

mkdirs:
	@mkdir -p $(BIN_DIR)
	@mkdir -p $(OBJ_DIR)
	@mkdir -p $(DEP_DIR)

install: all
	mkdir -p $(INSTALL_DIR)/bin/$(BMS_OSNAME)
	install -p $(EXE_PATHNAMES) $(INSTALL_DIR)/$(BMS_OSNAME)/bin

relink: exec_clean install

depclean:
	rm -rf $(DEP_DIR) $(DICT_FILES) *.o *.bak *~ core last.kumac*  #*#

clean:
	set nonomatch; rm -rf $(BIN_DIR) $(OBJ_DIR) $(DEP_DIR) $(DICT_FILES) *.o *.bak *~ core last.kumac*  #*# 

pristine: clean
	set nonomatch; rm -rf .bin .obj .lib .depends

exec_clean:
	rm -f $(EXE_PATHNAMES)

# Rules to make DEPENDS files from source. Note that these are similar to the
# rules in Makefile.lib, but uses the objects explicitly
$(DEP_DIR)/%.d : %.cpp
	mkdir -p $(DEP_DIR)
	$(DCXX) -MM -MT "$(basename $(notdir $@)).o" $(CXXFLAGS) $< > $@
$(DEP_DIR)/%.d : %.cc
	mkdir -p $(DEP_DIR)
	$(DCXX) -MM -MT "$(basename $(notdir $@)).o" $(CXXFLAGS) $< > $@
$(DEP_DIR)/%.d : %.cxx
	mkdir -p $(DEP_DIR)
	$(DCXX) -MM -MT "$(basename $(notdir $@)).o" $(CXXFLAGS) $< > @
$(DEP_DIR)/%.d : %.c
	mkdir -p $(DEP_DIR)
	$(DCC) -MM -MT "$(basename $(notdir $@)).o" $(CFLAGS) $< > $@
$(DEP_DIR)/%.d : %.F
	mkdir -p $(DEP_DIR)
	$(DFC) -MM -MT "$(basename $(notdir $@)).o" $(filter-out -fno-automatic -ffixed-line-length-0 -fno-second-underscore,$(FFLAGS)) $< > $@

# Rules to make DEBUG objects from source. Note for programs, we give the
# objects funny names while for libraries only the library has a funny name.
%_d.o : %.cpp
	$(CXX) -c $(CXXFLAGS) $< $(OUTPUT_OPTION)
%_d.o : %.cc
	$(CXX) -c $(CXXFLAGS) $< $(OUTPUT_OPTION)
%_d.o : %.cxx
	$(CXX) -c $(CXXFLAGS) $< $(OUTPUT_OPTION)
%_d.o : %.c
	$(CC) -c $(CFLAGS) $< $(OUTPUT_OPTION)
%_d.o : %.F
	$(FC) -c $(FFLAGS) $< $(OUTPUT_OPTION)


# Rule to make ROOT dictionary
%_Dict.cc: %.h
	rootcint -f $@ -c $(INCS) $< 


env:
	@echo FC			     = $(FC)
	@echo CC			     = $(CC)
	@echo CXX		     = $(CXX)
	@echo LD            = $(LD)
	@echo FFLAGS	     = $(FFLAGS)
	@echo CFLAGS	     = $(CFLAGS)
	@echo CXXFLAGS	     = $(CXXFLAGS)
	@echo FSRC		     = $(FSRC)
	@echo CSRC		     = $(CSRC)
	@echo CXXSRC	     = $(CXXSRC)
	@echo LIBS		     = $(LIBS)
	@echo BMS_OSNAME	     = $(BMS_OSNAME)
	@echo OBJS		     = $(OBJS)
	@echo NO_DEP_OBJS   = $(NO_DEP_OBJS)
	@echo LIBNAME	     = $(LIBNAME)
	@echo DEPS		     = $(DEPS)
	@echo EXE_NAMES     = $(EXE_NAMES)
	@echo LD_LIBS       = $(LD_LIBS)
	@echo MISC_LIBS     = $(MISC_LIBS)
	@echo VPATH		     = $(VPATH)
	@echo MODULE_NAME   = $(MODULE_NAME)
	@echo MODULES       = $(MODULES)
	@echo MAIN_FILES    = "$(MAIN_FILES)"
	@echo MAIN_OBJS     = $(MAIN_OBJS)
	@echo NON_MAIN_OBJS = $(NON_MAIN_OBJS)


